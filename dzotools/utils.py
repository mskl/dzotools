# AUTOGENERATED! DO NOT EDIT! File to edit: utils.ipynb (unless otherwise specified).

__all__ = ['imgload', 'arr2img', 'clipvals', 'plot_hist', 'plot_cdf']

# Cell
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
from collections import Counter

# Cell
def imgload(path: str = "data/lenna.png", convert: str = None) -> np.array:
    """Load the image at given path and convert it to numpy ndarray."""
    img = Image.open(path)

    if convert:
        img = img.convert(convert)

    return np.asarray(img, dtype="int32")

# Cell
def arr2img(arr: np.array) -> Image:
    """Convert the PIL.Image to numpy array."""
    return Image.fromarray(arr.astype("uint8"))

# Cell
def clipvals(arr: np.array) -> np.array:
    """Clip the values to ve within the range of 1 byte."""
    # Equivalent to np.minimum(a_max, np.maximum(a, a_min))
    return np.clip(arr, 0, 255)

# Cell
def plot_hist(arr: np.array):
    """Plot histogram over pixel intensities."""
    ctr = Counter(arr.flatten())
    histdict = {k: ctr[k] for k in range(256)}

    fig, ax = plt.subplots()
    ax.bar(histdict.keys(), histdict.values())
    ax.set_xlabel("pixel value")
    ax.set_ylabel("value count")
    ax.set_title("Histogram (pixel brightness frequencies)")
    plt.tight_layout()
    return fig, ax

# Cell
def plot_cdf(arr: np.array):
    """Plot cumulative dictribution function over pixel intensities."""
    nctr = Counter(arr.flatten())
    ndict = dict(sorted(nctr.items(), key=lambda x: x[0]))
    cdict = dict(zip(ndict.keys(), np.cumsum(list(ndict.values()))))

    fig, ax = plt.subplots()
    ax.plot(cdict.keys(), cdict.values())
    ax.set_title("CDF (cumulative densities of pixel brightness values)")
    plt.tight_layout()
    return fig, ax