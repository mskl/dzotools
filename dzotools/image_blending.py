# AUTOGENERATED! DO NOT EDIT! File to edit: 05_image_blending.ipynb (unless otherwise specified).

__all__ = ['SparseMatrix']

# Cell
class SparseMatrix:
    def __init__(self, heigth, width):
        self.heigth, self.width = heigth, width

        # Working memory to speed up reallocation
        self.out = np.zeros(width, dtype="float32")
        self.rows = {
            r: {} for r in range(heigth)
        }

    @property
    def shape(self):
        return (self.heigth, self.width)

    def __getitem__(self, location):
        """Get the value or default to zero."""
        y, x = location

        return self.rows[y].get(x, 0)

    def __setitem__(self, location, value):
        """Set the value in a sparse format."""
        y, x = location

        row = self.rows[y]
        if x in row and row[x] != value:
            print(f"Overwriting row/col {y}/{x} value from {row[x]} to {value}!")

        self.rows[y][x] = value

    __array_priority__ = 10000

    def __mul__(self, x: np.array) -> np.array:
        """Multiplication with a numpy array. Could perhaps be faster?"""
        self.out = np.zeros_like(self.out, dtype="float32")
        for y, row in self.rows.items():
            k = np.fromiter(row.keys(), dtype="int32")
            v = np.fromiter(row.values(), dtype="float32")
            self.out[y] = np.dot(x.take(k), v)

        return self.out