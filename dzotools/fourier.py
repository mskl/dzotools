# AUTOGENERATED! DO NOT EDIT! File to edit: 02_fourier.ipynb (unless otherwise specified).

__all__ = ['lena', 'fractal', 'square', 'wave', 'arrays', 'draw_pair', 'fft_amplitude', 'lena_amp']

# Cell
from .utils import imgload

lena = imgload('data/lenna.png', convert="L")
fractal = imgload('data/fractal.png', convert="L")
square = imgload('data/square.png', convert="L")
wave = imgload('data/wave.png', convert="L")

arrays = [lena, fractal, square, wave]

# Cell
import numpy as np
import matplotlib.pyplot as plt

def draw_pair(arr1: np.array, arr2: np.array):
    """Show 2 images side by side"""
    fig, ax = plt.subplots(1, 2, figsize=(10, 10), sharey=True)
    ax[0].imshow(arr1, cmap='gray', vmin=0, vmax=255)
    ax[1].imshow(arr2, cmap='gray', vmin=0, vmax=255)
    plt.tight_layout()
    return fig, ax

# Cell
from numpy.fft import fft2

def fft_amplitude(arr: np.array) -> np.array:
    """Get the amplitude spectrum of the given np array"""
    # Compute the 2-dimensional discrete Fourier Transform
    # Contains complex numbers (x.real, x.imag)
    spectrum = fft2(arr)

    # np.abs gives magnitude of complex number i.e. sqrt(a^2 + b^2)
    return np.abs(spectrum)

# Cell
from .monadic import equalize

# Get the amplitude spectrum
lena_amp = fft_amplitude(lena)

# Compare the equalized image with logarithm monadic op
draw_pair(np.log(1+lena_amp)*20, equalize(lena_amp))
plt.show()

# Cell
draw_pair(lena, equalize(fft_amplitude(lena)))
plt.show()

# Cell
draw_pair(square, equalize(fft_amplitude(square)))
plt.show()

# Cell
draw_pair(wave, equalize(fft_amplitude(wave)))
plt.show()

# Cell
draw_pair(fractal, equalize(fft_amplitude(fractal)))
plt.show()